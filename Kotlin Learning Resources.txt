/*
* <-----------------------------NOTES ABOUT KOTLIN LANGUAGE----------------------------->
*/
1. Unit object corresponds the same as void in Java
2. Function declaration - fun myFunc(msg: String) : Unit {println(msg)}; fun calling in two ways - myFunc("hello") OR myFunc(msg = "Hello")
3. Function optional args - fun myFunc(msg: String, prefix: String = "Message:")
4. Single-expression function - fun multiply(a: Int, b: Int): Int = a * b;
5. Infix function - extends a class and allows you to use it by omitting '.' operator. 
    5.1 - infix fun Int.times(str: String) = str.repeat(this); println(5 times "Bye ") //prints 5 times bye
    5.2 - val pair = "Ferrari" to "Porsche"; println(pair) //prints (Ferrari, Porsche); 
6. Operator functions - Improves infix functions and allows to use operators for infix fun   
    6.1 - operator fun Int.times(str: String) = str.repeat(this); println(2 * "Bye ") //prints bye twice
7. Functions with vararg - fun printAll(vararg msg: String) {for(m in msg) print("$m ")} //prints all strings
    7.1 You can add additional parameter to vararg function. Java does not allow that
    7.2 To pass vararg as a String use * operator to pass in *msg instead of passing Array<String> 
8. Mutable and immutable variables - val and var uses type inference to declare type of variable.
    8.1 val - immutable variable. Usage of val is recommended (Similar to final in Java)
    8.2 var - mutable variable. Use when you want to change variable
    8.3 var neverNull: String = "Can't be null"; var neverNull: String? = "Can be null"
9. Declaring classes - no need for 'new' keyword. Kotlin creates constructor automatically. WHen creating data class, Kotlin generates toString and equals methods
    9.1 class Person(var name: String, val bday: Date); creates mutable name and immutable bday
    9.2 DATA class Person(var name: String, val bday: Date); creates data class with toString and equals, hashCode and copy methods generated already
    9.3 Kotlin classes are final by default
    9.4 To declare class for inheritance use open modifier: open class Dog{}. Same for method overriding, you need to use open
    9.5 ENUM classes model types that represent finite state for some task e.g. human state, car state, et cetera; enum class State {IDLE, RUNNING, FINISHED}
    9.6 Sealed Classes allows to restrict inheritance. Once classes are declared as sealed classes, nobody can create its subclasses
    9.7 To extend data class, use 'constructor' keyword
10. Generics - increases code reusability. class MutableStack<E> (vararg items: E)
    10.1 Generic functions - fun <E> mutableStackOf(vararg elements: E) = MutableStack(*elements)
11. Inheritance - Create a class that can be used to extend into more unique class with similar behavior of the parent class
    11.1 Overriding methods or attributes requires the 'override' modifier
    11.2 Passing Constructor arguments in super class + default parametarized argument - class SiberianTiger(origin: String = "Siberian"): Tiger(origin = origin)
        11.2.1 In this case SiberianTiger argument is nor val or var because it just passes value to the superclass
12. When (switch successor) - can be used as a statement or as an expression
    12.1 When Statement:
    fun cases(obj: Any){
    when(obj){
        1 -> println("One")
        "Hello" -> println("Greetings")
        is Long -> println("Long")
        !is String -> println("Not a string")
        else -> println("DEFAULT SWITCH $obj" )
    }
}
    12.2 When Expression: (default branch is required to avoid crashes?)
    fun whenAssign(obj: Any): Any{
    return when(obj){
        1 -> "one"
        "Hello" -> 1
        is Long -> false
        else -> 42
    }
}
13. Ranges - Kotlin as set of tools to define ranges. Useful in for loops to define how long you want to loop
    13.1 for(i in 0..3) print("$i ") // prints 0 1 2 3
    13.2 for(i in 2..8 step 2) print("$i ") //prints 2 4 6 8 bcuz step 2 adds +2 to i just like i+= 2
    13.3 for(i in 3 downTo 0) print("$i ") //prints 3 2 1 0 bcuz downTo == i--;
    13.4 range can iterate over chars too for(c in 'a'..'d') print("$c ") // a b c
    13.5 for(c in 'z' downTo 's' step 2) print("$c ") // z x v t 
    13.6 Ranges can also be used in if statement! 
        val x = 2; 
        if(x in 1..10) print("X is in range 1..10")
        else if(x !in 1..4) print("X is not in range 1..4")
14. Equality Checks - == for structural comparison e.g when comparing two list they must have same items to return true; === for referential comparison e.g. compared obj has to come from the same reference
15. Kotlin has no ternary operator, however you can write like this: fun max(a: Int, b: Int) = if(a > b) a else b
16. Object keyword - this keyword ensures that only one instance of specific class is created even if there are two threads running aka anonymous class in Java. + Object keyword helps to create a singleton pattern. Other case is to use it as a declaration where you can write your own custom methods. But if you want to use static methods in Kotlin, use companion object.
17. Higher-Order function is a function that can take another function as a parameter
    17.1 fun calculate(x: Int, y: Int, operation: (Int, Int) -> Int): Int {return operation(x, y)}
         fun sum(x: Int, y: Int) = x + y
         val sumResult = calculate(5, 5, ::sum)
         val multResult = calculate(x = 5, y = 5, operation = {a, b -> a * b})
         OR
         val multResult = calculate(5, 5) {a, b -> a * b} Kotlin suggests to have lambda outside of parenthesis
    17.2 fun operation(): (Int) -> Int{
        return ::square
         }
         fun square(x: Int) = x * x
         val func = operation()
         println(func(2))
18. Lambdas are very flexible in Kotlin the only thing you need to satisfy is give compiler a way to know what type are you using
    18.1 val upperCase3 = { str: String -> str.toUpperCase() }  //Here compiler knows its a string
    18.2 val uppercase4 = {str -> str.toUpperCase()} //Here compiler can not figure out String will be used in the method so it prompts an error
19. Extension functions and properties
    19.1 Extension functions - extends classes functions
    19.2 Extension properties - extends classes properties
COLLECTIONS
20. List can be mutable and immutable. List<T> Immut; MutableList<T> Mutable;
    20.1 List iteration: mList.forEach{println("Data: $i")
    20.2 It is possible to check if something exists in collection by 'in' keyword
         OLD: if(fruits.contains("apples")) println("You have apples")
         NEW: if ("apple" in fruits) println("You have apples")
21. Set is an unordered collection that does not support duplicates. To create set use setOf() (returns Set<T>) and mutableSetOf() (returns MutableSet<T>))
22. Map is a collection of key/value pairs. Where each key is unique and that key represents value. To create map use: mapOf() or mutableMapOf()
    22.1 Map iteration myMap.forEach( (t, u) -> println("$t : $u"))
23. 
    23.1 'filter' function enables to filter collections 
         val numbers = listOf(1, -2, 3, -4, 5, -6)
         val pos = numbers.filter {it > 0} //returns positive numbers
         val neg = numbers.filter {it < 0} //returns negative numbers
    23.2 'map' functions allows you to transform all elements in the collection
         val doubled = numbers.map {it * 2} //returns all numbers doubled
    23.3 'any' function returns true if collection contains at least one predicate
         val anyNegative = numbers.any {it < 0}
         'all' returns true if all elements match predicate
         val allNegative = numbers.all {it < 0}
         'none' returns true if there is no element that matches predicate
         val allLess6 = numbers.none {it > 6}
    23.4 'find' finds first element in collection that matches predicate and returns it
    23.5 'findLast' finds last element in collection that matches predicate and returns it
    23.6 'first' returns first element, 'last' returns last element in collection
    23.7 'count' returns collection size or you can define how that size is calculated
         val numbers = listOf(1, -2, 3, -4, 5, -6)
         val evenCount = numbers.count {it % 2 == 0}
    23.8 'associateBy' and 'groupBy' builds a map from the elements of collection to a specified key. Optionally you can specify what value can be put to that key
    Difference between associateBy and groupBy is that associateBy uses last suitable element, and groupBy builds a list of suitable elements
         1)val cityBook = people.associateBy(Person::phone, Person::city) //returns Map<String, String> where key is phone and value is city
         2) val peopleCities = people.groupBy(Person::city, Person::name) //returns Map<String, List<String>> key is city, value is names of people who live in the city
    23.9 'min' 'max' and 'minBy' 'maxBy' allows to find minimum or maximum element in a collection. If collection is not a number, you have to declare your way how to determine min or max by using minBy/maxBy function
         val list = listOf(p1, p2, p3) //p1-p3 has name and age properties
         val min = list.minBy{it.age}
         val max = list.maxBy{it.age}
    23.10 'sorted' returns collection sorted ascending, you can use 'sortedBy' to define your own sorting
         val shuffled = listOf(5, 4, 3, 2, 1)
         val inverted = shuffled.sortedBy{-it} //returns inverted collection
24. #500 'let' and 'run' allows to attach code block to a variable (not sure of use cases for this) The use case that I have in my head is satisfied by using 'apply' keyword. It initializes object and executes statements in a code block. 
'let' use case is to execute code block if not null
25. 'with' keyword allows to access members arguments and properties
    data class Person(val name: String, val age: Int)
    var p = Person("Ainis", 21)
    with(p) {println("$name $age")}
26. To check what instance is use 'is' keyword if(obj is String) println("You got string")
27. Elvis operator ?: is if not null and else shorthand. If not null, return value, if null, do something that's specified
    println(files?.size ?: "empty")
28. 'if' and 'try/catch' can be written as expressions
    if: val result = if(param -- 1) "one" else if(param == 2) "two" else "three"
29. How to create an annotation class that can be used to warn the programmer that specific class is experimental:
    @Experimental(level = Experimental.Level.WARNING)
    annotation class NewAPI
    @NewAPI
    class MicroserviceAPI
30. Observable Delegate Example: Returns a property delegate for a read/write property that calls a specified callback function when changed
    import kotlin.properties.Delegates.observable
    var maxCount: Int by observable(initialValue = 3){ property, oldValue, newValue ->
        println("${property.name} is being changed from $oldValue to $newValue")
    }
31. Inline functions are important if you are over-using lambdas. Because when fun is using lambdas, new object is always created and it allocates a heap, while inline function copies the lambda code block to the place where it is being called
32. var i1: Int = 5 is Int in Kotlin, int in Java; var i2: Int? = 4 is Int? in Kotlin, Integer in Java
33. Lateinit var promises compiler that it will be initialized before usage
    33.1 !::INSTANCE.isInitialized returns true if INSTANCE is initialized, false if not 
34. Companion objects allow clients to access the methods for creating or getting an instance without instantiating a class. ???
35. @Volatility: Values with volatility will not be cached, and all reads and writes will be done to and from the main memory. This helps to make sure the value is always uo-to-date and the same to all execution threads. It means that changes made by one thread to Volatile value are visible to all other threads immediately, and you don't get a situation where, say two threads each update the same entitity in a cache, which would createa a problem.
36. RequireNotNull(this.nullableVariable).doSomething - This function throws IllegalArgumentException if value is null
37. .let method extension: myItem?.let {//do this} is SAME as if(myItem != null) {//do this}
38. Lazy initialization - delays initialization until object is required. In multithreaded code, lazy initialized objects must be synchronized to guard against race conditions
39. Separate DTO with Domain models. DTO should have only network model related fields and have an extension method to create from DTO object a Domain Model object that can be used by the user in some way. This promotes separation of concerns between Network received data and domain models
40. Iterating through an array or a list you can get index and element in for loop
    for((index, element) in myList.withIndex()) {println("Index: $index Element: $element")}
41. Pairs and Triples can be used to return more than one value in a function! That's a game changer! ;o No need to create data classes that have two values that I want a function to return
42. Generics <T> by default stands for the nullable Any? and allows passing null in Generics, to not allow it, define Any type for generic: class Aquarium<T: Any>(val waterSupply: T)
    42.1 In this case Any is a generic constraint. You can make generic constraints for specific. If I have a big parent class with many children, I can define a generic constraint and allow only specific classes to be used as a generic
     class Aquarium<T: WaterSupply>(val waterSupply: T)
43. If really needed you can combine higher order functions with extensions and have an extension method inside function's parameters ;o
44. SAM aka Single Abstract Method is an interface with one method. Very simple, think about Java interfaces like Runnble having run() and Callable having call()
45. Interface Segregation Principle in Android : BottomSheetCallback has two methods: onSlide and onStateChanged. I need only onStateChanged. I can make an extension with interface callback as an argument val OnStateChangedListener for BottomSheetCallback. Inside extension method, I would run BottomSheetCallback with two methods, but use only onStateChanged. There I would use OnStateChangedListener and invoke it while leaving onSlide method empty. 
Interface: interface OnStateChangedListener() {
    fun onStateChanged()
}
Impl: BottomSheetBehavior.setupOnStateChangedListener(callback: OnStateChangedListener) {
    BottomSheetCallback.() {
        override onStateChanged(){
            callback.onStateChanged()
        }
        override onSlide(){}
    }
}
Usage: val listener = object : OnStateCHangedListener
/*
 * <-----------------------------Kotlin Android Learnings----------------------------->
 */

 1. Data Binding - allows to reduce findViewById usage that reduces performance by traversing each view in the app. To use it first: 
    1) Enable it in gradle
    2) Wrap current activity layout with <layout>
    3) Create binding object: ActivityMainBinding = DataBindingUtility.setContentView(this, R.layout.activity_main)
    4) To use binding: binding.apply (view1.text = ay; view2.text = "4")
    Steps to bind views to data:
    1) Add <data> block inside <layout> block
    2) Define <variable> in <data> block with name and type attributes
    3) Create class in activity and bind it by binding.dataName = dataName
    4) In XML views bind data using "@{dataName.username} 
    Listener Binding: ViewModels
    1) Attach gameViewModel variable in <layout tag>
    2) Attach gameViewModel to binding.gameViewModel
    3) Let's say on each button create onClick attribute and specify a lambda method like this: onClick="@{()-> gameViewModel.endGame()}"
        LiveData
    1) Assign on TextView text attribute this: text="@{gameViewModel.text}" and Data Binding creates observer automatically
    2) let binding object know who is the lifecycle owner with this line
        binding.lifecycleOwner = this
    Other
    1) Once you wrap layout in <layout> then it generates MyViewBinding that can be used in code
    2) Sometimes Generated code is not compiled, so Make Project to compile it!
2. Navigation Architecture Component.
    2.1 Safe Args generates code and classes that helps detect compil-time errors when using Bundles for key-value transactions between Fragment A and Fragment B
    2.2 To use SafeArgs in code and simplify specifying action ID to go to another fragment, use generated NavDirection classes which helps you to remember better what action ID you need to use 
    FROM view.findNavController().navigate(R.id.actionGoThereA)
    TO view.findNavController().navigate(GoThereDirections.GoThereA())
    2.3 To send values from A to B fragments, first in NavGraph specify on receiver fragment what he wants to get from sending fragment in Attributes -> Arguments and those values will become argument for NavDirection methods used in navController.navigate
3. Timber - a logging tool better than log.x. To use it, Application class is needed, as timber needs control through the whole app. Timber automatically adds TAG to the log, you do not need to specify TAG static constant
4. Lifecycle Jetpack component. Allows classes to observe Lifecycle owners which are activities or fragments. Simply extend a class with a LifecycleObserver and pass in a Lifecycle object which would represent a fragment or activity that will be observed. Next annotate methods and define on what Lifecycle event they should be triggered by Lifecycle library
5. ViewModels contains UI variables, so Ui can do configuration changes without losing. Also business logic should be in ViewModel, so let's say you got a list of random words, you need to shuffle them in ViewModel
    5.1 To create ViewModel with an constructor, use ViewModelFactory
6. LiveData. To encapsulate LiveData and return to UI only LiveData you need to values: private val _score = MutableLiveData<Int>() && val score: LiveData<Int> get() = _score and setters with getters in ViewModel
7. BottomNavigationView combined with Nav component is added simply. Just match menu item ids with Navigation Graphs IDs. Find on MainActivity BottomNavView and setUpWithNavController. 
https://stackoverflow.com/questions/50577356/android-jetpack-navigation-bottomnavigationview-with-youtube-or-instagram-like
8. Room. When defining DAO and returning an individual entity, make it nullable. Not sure why tho. To handle cases for empty tables and data cleared situations
    8.1 To get recent data, SELECT * FROM <table-name> ORDER BY <id> DESC LIMIT 1
    8.2 Process to make RoomDB: Create data class -> Create DAO object -> Create RoomDB class 
        How to create RoomDB class: public abstract class -> initialize DAOs inside class block -> companion object -> define INSTANCE that is volatile
    8.3 It is a good practice to decouple domain model, with network model and database model. All three of these models are similar, however each is for its own cases. It helps to structure in a bigger app. DTO also considered as Network Model would have two extension methods: 1) NetworkModel -> DomainModel; 2) NetworkModel -> DatabaseModel; Database model would have one extension: 1) DatabaseModel -> Domain Model. If there was a POST, then I guess DatabaseModel could have an extension to NetworkModel to post new data
9. JUnit Tests. 
    @Before - What to do before testing. This is a place to initialize let's say a Room database
    @After - Place to close connections with database, network, et cetera
    @Test - Is a place where you write your test and to asserts
    @Throws(Exception::class) - Write this below @Test annotation to ensure you get a Exception
    @RunWith(AndroidJUnit4::class)
    `My amazing unit test named with spaces` - basically an have functions with a verbose name
10. Coroutines. Coroutines are the background tasks. They need three things: Scope, Dispatcher and Job. Usually scope is ui, but job is dispatched to IO thread pool.
    10.1 To create a coroutine. First create a Job, then a CoroutineScope(Dispatchers.Main + myJob). Then use scope to launch a coroutine and use withContext to define using IO context instead of blocking main UI thread.
11. Transformations.map can be very useful when making button states. COmbined with data binding and view models few lines of code are required to define when button should be enabled or disabled. Have a viewmodel where you define transformed val buttonVisible values that goes like this:
    val startButtonVisible = Transformations.map(tonight) {it == null} this will return boolean if tonight value is null
    Attach this value via Data Bindings on XML layout button android:enabled and that's it
12. RecyclerView. You can add a layoutManager inside the XML ;o
    12.1 Adapter's onCreateViewHolder viewType parameter is used when there are multiple views in the same RV. E.g. text, image and photo in one VH. I can have headers also. I could make const val 0 for header, const val dataItem1 1 and have header to tell what data user is going to see while scrolling, and if I want to craete more headers, just need to use Sealed class for abstracting headers and data into one class, create viewholder and xml file for header or new data item to be displayed. Update adapter and methods to use RecyclerView.ViewHolder. Return correct type in onCreateViewHolder.
    12.2 To create a data setter, you can use Kotlin setter where variable was declared ;o just set(value) {field = value; notifyDataSetChanged()}
    12.3 NotifyDataSetChanged is inefficient. Should use DiffUtil that follows Eugene's Diff algorithm to find difference between new and old list in order to update changed item faster without stuttering in large datasets. DiffUtil combined with ListAdapter that extends RV and requires to generics - data model (POJO) and ViewHolder
    12.4 LayoutManager handles what layout should be used, Linear or Grid like
    12.5 Adapter's job is to deal with adapting data for display, not with app logic! 
    12.6 To handle clicks on recyclerview, attach click listener to list items in VH, handle clicks in ViewModel. 
         1) Create a listener that takes val ClickListener: (passVal: String) -> Unit
         2) Set click listener on android:onClick with DataBinding
         3) Pass click Listener to RVAdapter
         4) pass listener in onBindViewHolder to ViewModel
         5) attach clicklistener to ViewHolder layout via Data Binding like binding.clickListener = clickListener
         6) Implement clicklistener when initializing an adapter
    12.7 Create VIEWMODELFACTORIES inside ViewModel class as a inner class. Creation of VM would look like this: viewModel = ViewModelProviders.of(this, MyViewModel.Factory(someArgument)).get(MyViewModel::class.java)
13. Convert parameter to receiver! VERY USEFUL!! Let's say you extract a function from RV Adapter onBindViewHolder to a fun bind(holder: VH, item: SleepNight). Put cursor on holder, press alt+enter and choose convert parameter to receiver. It makes an extension method for ViewHolder class we made and simplifies the code!
14. To convert XML ConstraintLayout to data binding, put cursor on ConstraintLayout tag, press alt+enter and choose convert to data binding
15. Stateful navigation explained to myself: 
    First you declare private mutablelivedata and public livedata with value that will be observed in a fragment that will change itself soon. define two methods - 1) which enters a value to mutablelivedata 2) which nullifies value from mutablelivedata. This is done so when observer is using newValue?.let{} it checks if its not null, execute, if it is, do not execute let code block. Add trigger function in a place where it will be triggered (e.g. button onClick via databinding) then value has something in it, which triggers observer that is added in a fragment, and what observer does is navigate to a new fragment and once navigation finishes call nullifying method that makes value null so when observer is notified again, he does not call the code to navigate to a fragment that you already exist in 
16. Retrofit. Retrofit and ObjectApi instances can stay in ApiServices.kt file. where you define converter factory, call  adapter factory, const val base url and API endpoints app will call to.
    39.1 Call adapters add the ability for retrofit to create APi's that return something other than the default Call class. Instead of returning Call<String> now we will do Deferred<String> in API Calls to help api calls work with coroutines. Since deferred inherits from Job. To use deferred object, you MUST BE INSIDE a coroutine!
17. Glide. To add placeholder and error images, use .apply(RequestOptions().placeholder(img).error(errorImg))
18. WorkManager deferrable and guaranteed execution. Deferrable means that it is not required to run immediately, e.g. sending analytical data to server or syncing db in the background. Guaranteed execution means that task will run even if the ap exits or the device restarts
    18.1 WorkManager classes
        - Worker: This is the place where background work is done in an overriden method doWork. Class must extend Worker
        - WorkRequest: Use WorkRequest to configure how and when to run the worker task. With the help of Constraints e.g. WiFi connected, device charging et cetera. There are two types of WorkRequests: 1) OneTimeWorkRequest: a task that will happen only once; 
        2) PeriodicWorkRequest: Work that can repeat at intervals (minimum interval = 15 min)
        - WorkManager: Schedules and runs WorkRequest. It spreads the load on system resources.
19. Google Maps. Create MapsActivity through template projects, get API key and use the map. 
    - SupportMapFragment is the map itself. In onCreate find it and use 
    getMapAsync on the activity myMapFrag.getMapAsync(getActivity())
    - map.addMarker(MarkerOptions().position(LatLng(55.0, 23.0).title("Lithuania")))
    - You can add polygons, polylines, circles and ground overlay objects on the map. Also you can customize map style with Styling Wizard
    - map.moveCamera(CameraUpdateFactory.newLatLng(LatLng(55.0, 23.0)))
    - Zoom levels for Google Maps:
        1: World; 5: Landmass/continent
        10: City 15: Streets
        20: Buildings
    - Enabling My Location with My Location button 
    if(isPermissionGranted()){
        mMap.setMyLocationEnabled(true);
        mMap.getUiSettings().setMyLocationButtonEnabled(true);
    } else {
       ActivityCompat.requestPermissions(this,
           arrayOf<String>(Manifest.permission.ACCESS_FINE_LOCATION),
           REQUEST_LOCATION_PERMISSION)
   }

20. If I'd like to make a cardio app and track how many steps & distance a person has walked, I could use SensorManager & Sensor.TYPE_STEP_DETECTOR. 
    20.1 To track steps. Simply create a listener, register/unregister it in act/frag. In onSensorChanged check if sensor.type == Sensor.TYPE_STEP_DETECTOR, then increase step count by one. 
    20.2 To calculate distance. First get average step length of a person. If male, then mHeight * 0.415; If female, then fHeight * 0.413. Average for male is 78cm, for female 70cm
/*
 * <-----------------------------LEARNING PLAN----------------------------->
 */

+ https://play.kotlinlang.org/byExample/01_introduction/01_Hello%20world
+ https://github.com/Zhuinden/guide-to-kotlin/wiki
+ https://medium.com/@renaudcerrato/the-kotlin-guide-for-the-busy-java-developer-93dde84a77b7
+ https://codelabs.developers.google.com/android-kotlin-fundamentals/
+ LocalBroadcastManager
+ https://developer.android.com/courses/kotlin-bootcamp/overview IMPROVE KOTLIN KNOWLEDGE EVEN MORE
+ https://codelabs.developers.google.com/codelabs/android-room-with-a-view-kotlin/#0
+ https://developer.android.com/jetpack/docs/guide
+ Kotlin SOLID https://blog.joshua-greenwood.com/the-solid-principles-and-kotlin/?utm_source=reddit&utm_medium=reddit&utm_campaign=the-solid-principles-and-kotlin
+ Big tutorial with many things to learn https://www.baruckis.com/android/kriptofolio-app-series/
+ Lazy Property
+ Null-Safety https://kotlinlang.org/docs/reference/null-safety.html
+ Iterators
+ Sealed Classes
+ Objects + Companions https://antonioleiva.com/objects-kotlin/
+ Lambdas https://kotlinlang.org/docs/reference/lambdas.html
+ Delegates and Delegated Properties
    + https://proandroiddev.com/kotlin-delegates-in-android-1ab0a715762d?source=friends_link&sk=222c722e33151eefed54401bb6248701
+ More about generics https://kotlinlang.org/docs/reference/generics.html
12.10 Kotlin Coding Conventions and Tips
+ https://codelabs.developers.google.com/codelabs/constraint-layout/index.html#0
+ WorkManager
- Coroutines
    - https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/composing-suspending-functions.md
    - https://codelabs.developers.google.com/codelabs/kotlin-coroutines/#0
    - https://medium.com/androiddevelopers/easy-coroutines-in-android-viewmodelscope-25bffb605471
+ Command Pattern
- More about Coroutines
    - https://kotlinlang.org/docs/reference/coroutines/shared-mutable-state-and-concurrency.html#actors
    - https://codelabs.developers.google.com/codelabs/advanced-kotlin-coroutines/#0
+ Dagger2 Codelab https://codelabs.developers.google.com/codelabs/android-dagger/
- Koin
    - https://medium.com/@gunayadem.dev/boost-your-android-apps-with-koin-and-coroutines-using-mvvm-in-kotlin-d30fe436ab4c
+ ViewBinding https://developer.android.com/topic/libraries/view-binding#fragments
- Android 11 Permission Review https://joebirch.co/2020/02/21/exploring-the-android-11-developer-preview-permission-changes/
- Read more about MVVM architecture
- Read more about Koin
- Start doing Todo App Design
- Start developing Todo App
- https://codelabs.developers.google.com/codelabs/android-network-security-config/index.html
- https://codelabs.developers.google.com/codelabs/android-paging/#2
- https://kotlinlang.org/docs/reference/delegated-properties.html
- Color Theory
/*
* <-----------------------------LEARNING MATERIAL----------------------------->
*/

<-----------DEPENDENCY INJECTION-------------->
+ https://www.techyourchance.com/dependency-injection-myths-debunked/
+ https://www.techyourchance.com/dependency-injection-android/
+ https://android.jlelse.eu/basics-of-dependency-injection-for-dummies-b844d642e174
+ https://blog.kotlin-academy.com/dependency-injection-the-pattern-without-the-framework-33cfa9d5f312
+ https://developer.android.com/training/dependency-injection
+ https://developer.android.com/training/dependency-injection/manual
- https://dagger.dev/tutorial/
- https://developer.android.com/training/dependency-injection/dagger-android
- https://android.jlelse.eu/practical-guide-to-dagger-76398948a2ea
- https://proandroiddev.com/dagger-2-on-android-the-simple-way-f706a2c597e9
+ https://arunkumar.dev/introducing-scabbard-a-tool-to-visualize-dagger-2-dependency-graphs/
- https://caster.io/courses/koin

<-----------FIREBASE-------------->
- In kotlin but the theory for extending livedata is the same https://medium.com/@lgvalle/firebase-viewmodels-livedata-cb64c5ee4f95

<-----------RxJava-------------->
- RxJava + Kotlin https://medium.com/@gabrieldemattosleon/fundamentals-of-rxjava-with-kotlin-for-absolute-beginners-3d811350b701

<-----------ARCHITECTURE-------------->
- MVVM Secrets https://android.jlelse.eu/exciting-secrets-about-mvvm-that-nobody-tells-you-a95548ea684b
- https://proandroiddev.com/our-way-to-mvvmi-and-mistakes-we-made-when-implementing-mvvm-5f5448b5ad50
- Android architecture 7 Parts http://www.digigene.com/architecture/android-architecture-part1/
- Meaning of "architecture" and difference vs architectural pattern https://twitter.com/VasiliyZukanov/status/1206211507551375360
- MVVM KOTLIN https://proandroiddev.com/android-architecture-starring-kotlin-coroutines-jetpack-mvvm-room-paging-retrofit-and-dagger-7749b2bae5f7
- https://proandroiddev.com/android-architecture-d7405db1361c GOOD

<-----------ARTICLES-------------->
- Retrofit, Coroutines and Kotlin https://android.jlelse.eu/android-networking-in-2019-retrofit-with-kotlins-coroutines-aefe82c4d777
- Better Custom Views with Delegates https://blog.autsoft.hu/better-custom-views-with-delegates/
- Type Safe Builders with Builder Pattern https://jimbaca.com/creating-type-safe-builders-kotlin/
- Kotlin Type Hierarchy http://www.natpryce.com/articles/000818.html

<-----------USEFUL-------------->
+ USEFUL FOR NAVIGATION ARCH https://medium.com/google-developer-experts/using-navigation-architecture-component-in-a-large-banking-app-ac84936a42c2
+ Working with the Soft Keyboard https://guides.codepath.com/android/Working-with-the-Soft-Keyboard
+ Kotlin Style-guide and reference for common mistakes https://www.reddit.com/r/androiddev/comments/77sl1c/devs_who_review_kotlin_regularly_what_are_things/dorsk3i/
+ XML Convention https://jeroenmols.com/blog/2016/03/07/resourcenaming/
- Kotlin Design Patterns https://github.com/dbacinski/Design-Patterns-In-Kotlin
- Kotlin Language Cheat Sheet https://blog.kotlin-academy.com/kotlin-cheat-sheet-1137588c75a
- Kotlin Data Science Resources https://github.com/thomasnield/kotlin-data-science-resources/blob/master/README.md
- https://medium.com/androiddevelopers/migrating-to-material-components-for-android-ec6757795351


<-----------LIBRARIES-------------->
- Kotlin Statistics https://towardsdatascience.com/introduction-to-kotlin-statistics-cdad3be88b5

<-----------PODCAST-------------->
- Android Backstage Podcast https://androidbackstage.blogspot.com/?m=1

<-----------BLOGS-------------->
- https://www.techyourchance.com/

<-----------OTHER-------------->
- How to research https://www.reddit.com/r/GetStudying/comments/cy85pg/how_to_effectively_research_for_an_academic_essay/

<-----------TOOLS-------------->
- shapeshifter.design